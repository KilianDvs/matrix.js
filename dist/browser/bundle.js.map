{
  "version": 3,
  "sources": ["src/index.ts", "src/app/matrix.ts"],
  "sourcesContent": ["export * from \"./app/matrix\"\n", "\"use strict\"\n\nexport type Row<Data> = Cell<Data>[]\nexport type Col<Data> = Row<Data>\nexport type Table<Data> = Row<Data>[]\nexport type Values<Data> = Data[][]\nexport type Cell<Data> = {\n  data: Data\n  [k: string]: any\n}\n\nexport class Matrix<Data> {\n  private _input: Table<Data> = []\n\n  constructor(input: Values<Data>, private asColumns = false) {\n    if (input.length === 0) return\n\n    if (asColumns) this.addCols(...input)\n    else this.addRows(...input)\n  }\n\n  get width() {\n    return Math.max(...this.rows.map((row) => row.length))\n  }\n\n  get height() {\n    return Math.max(...this.cols.map((col) => col.length))\n  }\n\n  get rows(): Table<Data> {\n    return this._input\n  }\n\n  get cols(): Table<Data> {\n    const cols: Table<Data> = []\n\n    for (let x = 0; x < this.rows.length; x++) cols.push(this.getCol(x))\n\n    return cols\n  }\n\n  get values(): Values<Data> {\n    return this.rows.map((row) => {\n      return row.map((cell) => cell.data)\n    })\n  }\n\n  getRow(y: number): Row<Data> {\n    return this._input[y]\n  }\n\n  getCol(x: number): Col<Data> {\n    return this._input.map((row) => row[x])\n  }\n\n  forRows(fn: (row: Row<Data>, y: number, rows: Table<Data>) => unknown) {\n    this.rows.forEach(fn)\n\n    return this\n  }\n\n  forCols(fn: (col: Col<Data>, x: number, cols: Table<Data>) => unknown) {\n    this.cols.forEach(fn)\n\n    return this\n  }\n\n  removeRow(at?: number) {\n    if (at === undefined) this.rows.pop()\n    else this.rows.splice(at, 1)\n\n    return this\n  }\n\n  removeCol(at?: number) {\n    this.forRows((row) => {\n      if (at === undefined) row.pop()\n      else row.splice(at, 1)\n    })\n\n    return this\n  }\n\n  addRow(input: Data[], at?: number) {\n    const row: Row<Data> = input.map((data) => ({ data }))\n\n    if (at === undefined) this._input.push(row)\n    else this._input.splice(at, 0, row)\n\n    return this\n  }\n\n  addCol(input: Data[], at?: number) {\n    const col: Col<Data> = input.map((data) => ({ data }))\n\n    this._input.forEach((row, i) => {\n      if (at === undefined) row.push(col[i])\n      else row.splice(at, 0, col[i])\n    })\n\n    return this\n  }\n\n  addRows(...input: Data[][]) {\n    for (const row of input) this.addRow(row)\n\n    return this\n  }\n\n  addCols(...input: Data[][]) {\n    for (const col of input) this.addCol(col)\n\n    return this\n  }\n\n  clone() {\n    return new Matrix(this.toJSON(), this.asColumns)\n  }\n\n  toJSON(): Values<Data> {\n    return JSON.parse(this.toString())\n  }\n\n  toString() {\n    return JSON.stringify(this.values)\n  }\n}\n"],
  "mappings": "wGAAA,6BCAA,aAWO,WAAmB,CAGxB,YAAY,EAA6B,EAAY,GAAO,CAAnB,iBAFjC,YAAsB,GAG5B,AAAI,EAAM,SAAW,GAErB,CAAI,EAAW,KAAK,QAAQ,GAAG,GAC1B,KAAK,QAAQ,GAAG,OAGnB,QAAQ,CACV,MAAO,MAAK,IAAI,GAAG,KAAK,KAAK,IAAI,AAAC,GAAQ,EAAI,YAG5C,SAAS,CACX,MAAO,MAAK,IAAI,GAAG,KAAK,KAAK,IAAI,AAAC,GAAQ,EAAI,YAG5C,OAAoB,CACtB,MAAO,MAAK,UAGV,OAAoB,CACtB,GAAM,GAAoB,GAE1B,OAAS,GAAI,EAAG,EAAI,KAAK,KAAK,OAAQ,IAAK,EAAK,KAAK,KAAK,OAAO,IAEjE,MAAO,MAGL,SAAuB,CACzB,MAAO,MAAK,KAAK,IAAI,AAAC,GACb,EAAI,IAAI,AAAC,GAAS,EAAK,OAIlC,OAAO,EAAsB,CAC3B,MAAO,MAAK,OAAO,GAGrB,OAAO,EAAsB,CAC3B,MAAO,MAAK,OAAO,IAAI,AAAC,GAAQ,EAAI,IAGtC,QAAQ,EAA+D,CACrE,YAAK,KAAK,QAAQ,GAEX,KAGT,QAAQ,EAA+D,CACrE,YAAK,KAAK,QAAQ,GAEX,KAGT,UAAU,EAAa,CACrB,MAAI,KAAO,OAAW,KAAK,KAAK,MAC3B,KAAK,KAAK,OAAO,EAAI,GAEnB,KAGT,UAAU,EAAa,CACrB,YAAK,QAAQ,AAAC,GAAQ,CACpB,AAAI,IAAO,OAAW,EAAI,MACrB,EAAI,OAAO,EAAI,KAGf,KAGT,OAAO,EAAe,EAAa,CACjC,GAAM,GAAiB,EAAM,IAAI,AAAC,GAAU,EAAE,UAE9C,MAAI,KAAO,OAAW,KAAK,OAAO,KAAK,GAClC,KAAK,OAAO,OAAO,EAAI,EAAG,GAExB,KAGT,OAAO,EAAe,EAAa,CACjC,GAAM,GAAiB,EAAM,IAAI,AAAC,GAAU,EAAE,UAE9C,YAAK,OAAO,QAAQ,CAAC,EAAK,IAAM,CAC9B,AAAI,IAAO,OAAW,EAAI,KAAK,EAAI,IAC9B,EAAI,OAAO,EAAI,EAAG,EAAI,MAGtB,KAGT,WAAW,EAAiB,CAC1B,OAAW,KAAO,GAAO,KAAK,OAAO,GAErC,MAAO,MAGT,WAAW,EAAiB,CAC1B,OAAW,KAAO,GAAO,KAAK,OAAO,GAErC,MAAO,MAGT,OAAQ,CACN,MAAO,IAAI,GAAO,KAAK,SAAU,KAAK,WAGxC,QAAuB,CACrB,MAAO,MAAK,MAAM,KAAK,YAGzB,UAAW,CACT,MAAO,MAAK,UAAU,KAAK",
  "names": []
}
