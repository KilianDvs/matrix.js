{
  "version": 3,
  "sources": ["src/index.ts", "src/app/matrix.ts"],
  "sourcesContent": ["export * from \"./app/matrix\"\r\n", "\"use strict\"\r\n\r\nexport type Row<Data> = Cell<Data>[]\r\nexport type Col<Data> = Row<Data>\r\nexport type Table<Data> = Row<Data>[]\r\nexport type Values<Data> = Data[][]\r\nexport type Cell<Data> = {\r\n  data: Data\r\n  [k: string]: any\r\n}\r\nexport type Vector = [number, number]\r\n\r\nexport class Matrix<Data> {\r\n  private _input: Table<Data> = []\r\n\r\n  constructor(input: Values<Data>, private asColumns = false) {\r\n    if (input.length === 0) return\r\n\r\n    if (asColumns) this.addCols(input)\r\n    else this.addRows(input)\r\n  }\r\n\r\n  get width() {\r\n    return Math.max(...this.rows.map((row) => row.length))\r\n  }\r\n\r\n  get height() {\r\n    return Math.max(...this.cols.map((col) => col.length))\r\n  }\r\n\r\n  get rows(): Table<Data> {\r\n    return this._input\r\n  }\r\n\r\n  get cols(): Table<Data> {\r\n    const cols: Table<Data> = []\r\n\r\n    for (let x = 0; x < this.rows.length; x++) cols.push(this.getCol(x))\r\n\r\n    return cols\r\n  }\r\n\r\n  get values(): Values<Data> {\r\n    return this.rows.map((row) => {\r\n      return row.map((cell) => cell.data)\r\n    })\r\n  }\r\n\r\n  getRow(y: number): Row<Data> {\r\n    return this._input[y]\r\n  }\r\n\r\n  getCol(x: number): Col<Data> {\r\n    return this._input.map((row) => row[x])\r\n  }\r\n\r\n  forRows(fn: (row: Row<Data>, y: number, rows: Table<Data>) => unknown) {\r\n    this.rows.forEach(fn)\r\n\r\n    return this\r\n  }\r\n\r\n  forCols(fn: (col: Col<Data>, x: number, cols: Table<Data>) => unknown) {\r\n    this.cols.forEach(fn)\r\n\r\n    return this\r\n  }\r\n\r\n  removeRow(at?: number) {\r\n    if (at === undefined) this.rows.pop()\r\n    else this.rows.splice(at, 1)\r\n\r\n    return this\r\n  }\r\n\r\n  removeCol(at?: number) {\r\n    this.forRows((row) => {\r\n      if (at === undefined) row.pop()\r\n      else row.splice(at, 1)\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  addRow(input: Data[], at?: number) {\r\n    const row: Row<Data> = input.map((data) => ({ data }))\r\n\r\n    if (at === undefined) this._input.push(row)\r\n    else this._input.splice(at, 0, row)\r\n\r\n    return this\r\n  }\r\n\r\n  addCol(input: Data[], at?: number) {\r\n    const col: Col<Data> = input.map((data) => ({ data }))\r\n  \r\n    this._input.forEach((row, i) => {\r\n      if (at === undefined) row.push(col[i])\r\n      else row.splice(at, 0, col[i])\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  addRows(input: Data[][], at?: number) {\r\n    if(at || at === 0) for (const col of input) this.addRow(col, at++)\r\n    else for (const col of input) this.addRow(col)\r\n\r\n    return this\r\n  }\r\n\r\n  addCols(input: Data[][], at?: number) {\r\n    if(at || at === 0) for (const col of input) this.addCol(col, at++)\r\n    else for (const col of input) this.addCol(col)\r\n    \r\n    return this\r\n  }\r\n\r\n  clone() {\r\n    return new Matrix(this.toJSON(), this.asColumns)\r\n  }\r\n\r\n  toJSON(): Values<Data> {\r\n    return JSON.parse(this.toString())\r\n  }\r\n\r\n  toString() {\r\n    return JSON.stringify(this.values)\r\n  }\r\n  \r\n  forZone(start: Vector, end: Vector, callback : ((cell: Cell<Data>, i:number, cells:Cell<Data>[]) => void)){\r\n    const cells: Cell<Data>[] = []\r\n    for (let x = start[0]; x < end[0]+1; x++) {\r\n      for (let y = start[1]; y < end[1]+1; y++) {\r\n        if(!this._input[y] || !this._input[y][x])\r\n          throw new Error(`No cell found at position : ${x} ${y}`)\r\n        cells.push(this._input[y][x])\r\n      }\r\n    }\r\n    cells.forEach((cell, i)=>{\r\n      callback(cell, i, cells)\r\n    })\r\n  }\r\n}\r\n"],
  "mappings": "wGAAA,6BCAA,aAYO,WAAmB,CAGxB,YAAY,EAA6B,EAAY,GAAO,CAAnB,iBAFjC,YAAsB,GAG5B,AAAI,EAAM,SAAW,GAErB,CAAI,EAAW,KAAK,QAAQ,GACvB,KAAK,QAAQ,OAGhB,QAAQ,CACV,MAAO,MAAK,IAAI,GAAG,KAAK,KAAK,IAAI,AAAC,GAAQ,EAAI,YAG5C,SAAS,CACX,MAAO,MAAK,IAAI,GAAG,KAAK,KAAK,IAAI,AAAC,GAAQ,EAAI,YAG5C,OAAoB,CACtB,MAAO,MAAK,UAGV,OAAoB,CACtB,GAAM,GAAoB,GAE1B,OAAS,GAAI,EAAG,EAAI,KAAK,KAAK,OAAQ,IAAK,EAAK,KAAK,KAAK,OAAO,IAEjE,MAAO,MAGL,SAAuB,CACzB,MAAO,MAAK,KAAK,IAAI,AAAC,GACb,EAAI,IAAI,AAAC,GAAS,EAAK,OAIlC,OAAO,EAAsB,CAC3B,MAAO,MAAK,OAAO,GAGrB,OAAO,EAAsB,CAC3B,MAAO,MAAK,OAAO,IAAI,AAAC,GAAQ,EAAI,IAGtC,QAAQ,EAA+D,CACrE,YAAK,KAAK,QAAQ,GAEX,KAGT,QAAQ,EAA+D,CACrE,YAAK,KAAK,QAAQ,GAEX,KAGT,UAAU,EAAa,CACrB,MAAI,KAAO,OAAW,KAAK,KAAK,MAC3B,KAAK,KAAK,OAAO,EAAI,GAEnB,KAGT,UAAU,EAAa,CACrB,YAAK,QAAQ,AAAC,GAAQ,CACpB,AAAI,IAAO,OAAW,EAAI,MACrB,EAAI,OAAO,EAAI,KAGf,KAGT,OAAO,EAAe,EAAa,CACjC,GAAM,GAAiB,EAAM,IAAI,AAAC,GAAU,EAAE,UAE9C,MAAI,KAAO,OAAW,KAAK,OAAO,KAAK,GAClC,KAAK,OAAO,OAAO,EAAI,EAAG,GAExB,KAGT,OAAO,EAAe,EAAa,CACjC,GAAM,GAAiB,EAAM,IAAI,AAAC,GAAU,EAAE,UAE9C,YAAK,OAAO,QAAQ,CAAC,EAAK,IAAM,CAC9B,AAAI,IAAO,OAAW,EAAI,KAAK,EAAI,IAC9B,EAAI,OAAO,EAAI,EAAG,EAAI,MAGtB,KAGT,QAAQ,EAAiB,EAAa,CACpC,GAAG,GAAM,IAAO,EAAG,OAAW,KAAO,GAAO,KAAK,OAAO,EAAK,SACxD,QAAW,KAAO,GAAO,KAAK,OAAO,GAE1C,MAAO,MAGT,QAAQ,EAAiB,EAAa,CACpC,GAAG,GAAM,IAAO,EAAG,OAAW,KAAO,GAAO,KAAK,OAAO,EAAK,SACxD,QAAW,KAAO,GAAO,KAAK,OAAO,GAE1C,MAAO,MAGT,OAAQ,CACN,MAAO,IAAI,GAAO,KAAK,SAAU,KAAK,WAGxC,QAAuB,CACrB,MAAO,MAAK,MAAM,KAAK,YAGzB,UAAW,CACT,MAAO,MAAK,UAAU,KAAK,QAG7B,QAAQ,EAAe,EAAa,EAAsE,CACxG,GAAM,GAAsB,GAC5B,OAAS,GAAI,EAAM,GAAI,EAAI,EAAI,GAAG,EAAG,IACnC,OAAS,GAAI,EAAM,GAAI,EAAI,EAAI,GAAG,EAAG,IAAK,CACxC,GAAG,CAAC,KAAK,OAAO,IAAM,CAAC,KAAK,OAAO,GAAG,GACpC,KAAM,IAAI,OAAM,+BAA+B,KAAK,KACtD,EAAM,KAAK,KAAK,OAAO,GAAG,IAG9B,EAAM,QAAQ,CAAC,EAAM,IAAI,CACvB,EAAS,EAAM,EAAG",
  "names": []
}
